import React, { useEffect, useRef, useState } from "react";

export default function ProfilePanel({
  open,
  onClose,
  token,
  apiUrl,
  theme,
  setTheme,
  hideDone,
  setHideDone,
  setTimezoneApplied,
  isTelegram = false,
}) {
  const [loading, setLoading] = useState(true);
  const [tz, setTz] = useState("Europe/Amsterdam");
  const [linkCode, setLinkCode] = useState("");
  const [linkExpires, setLinkExpires] = useState("");
  const [err, setErr] = useState("");
  const fileRef = useRef(null);
  const [pw, setPw] = useState({ old_password: "", new_password: "" });

  // üîí –õ–æ—á–∏–º —Å–∫—Ä–æ–ª–ª –±—ç–∫–≥—Ä–∞—É–Ω–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—ã–ª–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (!open) return;
    const prevOverflow = document.body.style.overflow;
    const prevPaddingRight = document.body.style.paddingRight;

    const hasScrollbar = window.innerWidth > document.documentElement.clientWidth;
    if (hasScrollbar) {
      const scrollBarWidth = window.innerWidth - document.documentElement.clientWidth;
      document.body.style.paddingRight = `${scrollBarWidth}px`;
    }
    document.body.style.overflow = "hidden";

    return () => {
      document.body.style.overflow = prevOverflow;
      document.body.style.paddingRight = prevPaddingRight;
    };
  }, [open]);

  useEffect(() => {
    if (!open) return;
    (async () => {
      try {
        setLoading(true);
        const res = await fetch(`${apiUrl}/profile`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (!res.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å");
        const p = await res.json();
        setTheme(p.theme);
        setHideDone(!!p.hide_done);
        setTz(p.timezone || "Europe/Amsterdam");
        setErr("");
      } catch (e) {
        setErr(String(e.message || e));
      } finally {
        setLoading(false);
      }
    })();
  }, [open]);

  const saveProfile = async () => {
    try {
      const res = await fetch(`${apiUrl}/profile`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ theme, hide_done: hideDone, timezone: tz }),
      });
      if (!res.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å");
      setTimezoneApplied?.(tz);
      alert("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ");
      setErr("");
    } catch (e) {
      setErr(String(e.message || e));
    }
  };

  const importICS = async () => {
    const f = fileRef.current?.files?.[0];
    if (!f) return alert("–í—ã–±–µ—Ä–∏—Ç–µ .ics —Ñ–∞–π–ª");
    const fd = new FormData();
    fd.append("file", f);
    try {
      const res = await fetch(`${apiUrl}/import-ics`, {
        method: "POST",
        headers: { Authorization: `Bearer ${token}` },
        body: fd,
      });
      if (!res.ok) {
        const d = await res.json().catch(() => ({}));
        throw new Error(d.detail || "–ò–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è");
      }
      const data = await res.json();
      alert(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${data.created}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${data.skipped}`);
      fileRef.current.value = "";
    } catch (e) {
      setErr(String(e.message || e));
    }
  };

  const changePassword = async () => {
    if (!pw.old_password || !pw.new_password) return alert("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å");
    try {
      const res = await fetch(`${apiUrl}/change-password`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(pw),
      });
      if (!res.ok) {
        const d = await res.json().catch(() => ({}));
        throw new Error(d.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å");
      }
      alert("–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω");
      setPw({ old_password: "", new_password: "" });
      setErr("");
    } catch (e) {
      setErr(String(e.message || e));
    }
  };

  const genTelegramCode = async () => {
    try {
      const res = await fetch(`${apiUrl}/telegram/link`, {
        method: "POST",
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥");
      const data = await res.json();
      setLinkCode(data.link_code);
      setLinkExpires(data.expires_at);
      setErr("");
    } catch (e) {
      setErr(String(e.message || e));
    }
  };

  const unlinkTelegram = async () => {
    try {
      const res = await fetch(`${apiUrl}/telegram/unlink`, {
        method: "DELETE",
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤—è–∑–∞—Ç—å Telegram");
      setLinkCode("");
      setLinkExpires("");
      alert("Telegram –æ—Ç–≤—è–∑–∞–Ω");
    } catch (e) {
      setErr(String(e.message || e));
    }
  };

  if (!open) return null;

  return (
    <div
      className="modal-overlay"
      onClick={(e) => { if (e.target === e.currentTarget) onClose(); }}
    >
      <div className="modal-card profile"
           role="dialog" aria-modal="true" aria-labelledby="profileTitle">
        <div className="modal-header sticky">
          <h3 id="profileTitle">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h3>
          <button className="icon-btn" onClick={onClose} aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
        </div>

        <div className="modal-body scroll">
          {err && <div className="alert" style={{ marginBottom: 12 }}>{err}</div>}

          {loading ? (
            <div className="skeleton" style={{ height: 200 }} />
          ) : (
            <>
              <section className="panel">
                <h4>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</h4>
                <div className="row">
                  <label className="switch">
                    <input
                      type="checkbox"
                      checked={theme === "dark"}
                      onChange={() => setTheme(theme === "dark" ? "light" : "dark")}
                      disabled={isTelegram}
                    />
                    <span>–¢—ë–º–Ω–∞—è —Ç–µ–º–∞{isTelegram ? " (—É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è Telegram)" : ""}</span>
                  </label>

                  <label className="switch">
                    <input
                      type="checkbox"
                      checked={hideDone}
                      onChange={(e) => setHideDone(e.target.checked)}
                    />
                    <span>–°–∫—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ</span>
                  </label>
                </div>

                <div className="row" style={{ marginTop: 8 }}>
                  <label className="field">
                    <span className="label">–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</span>
                    <input
                      className="input"
                      type="text"
                      value={tz}
                      onChange={(e) => setTz(e.target.value)}
                      placeholder="Europe/Amsterdam"
                    />
                  </label>
                </div>

                <div className="row-buttons">
                  <button className="btn primary" onClick={saveProfile}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
              </section>

              <section className="panel">
                <h4>–ò–º–ø–æ—Ä—Ç –∏–∑ Google Calendar (.ics)</h4>
                <p className="muted">
                  –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ Google Calendar ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç ‚Üí –≠–∫—Å–ø–æ—Ä—Ç (.ics),
                  –∑–∞—Ç–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞.
                </p>
                <input ref={fileRef} type="file" accept=".ics,text/calendar" />
                <div className="row-buttons" style={{ marginTop: 8 }}>
                  <button className="btn" onClick={importICS}>–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                </div>
              </section>

              <section className="panel">
                <h4>–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h4>
                <div className="row">
                  <input
                    className="input"
                    type="password"
                    placeholder="–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å"
                    value={pw.old_password}
                    onChange={(e) => setPw({ ...pw, old_password: e.target.value })}
                  />
                  <input
                    className="input"
                    type="password"
                    placeholder="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                    value={pw.new_password}
                    onChange={(e) => setPw({ ...pw, new_password: e.target.value })}
                  />
                </div>
                <div className="row-buttons" style={{ marginTop: 8 }}>
                  <button className="btn" onClick={changePassword}>–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</button>
                </div>
              </section>

              <section className="panel">
                <h4>–ü—Ä–∏–≤—è–∑–∫–∞ Telegram</h4>
                <div className="row-buttons">
                  <button className="btn" onClick={genTelegramCode}>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏</button>
                  <button className="btn danger" onClick={unlinkTelegram}>–û—Ç–≤—è–∑–∞—Ç—å Telegram</button>
                </div>
                {linkCode && (
                  <div className="info-box">
                    <div>–ö–æ–¥: <b>{linkCode}</b></div>
                    <div className="muted">–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {new Date(linkExpires).toLocaleString()}</div>
                    <div className="muted" style={{ marginTop: 6 }}>
                      –ü–æ–∑–∂–µ –±–æ—Ç –ø—Ä–∏–º–µ—Ç –∫–æ–º–∞–Ω–¥—É <code>/start {linkCode}</code> –∏ –ø—Ä–∏–≤—è–∂–µ—Ç –∞–∫–∫–∞—É–Ω—Ç.
                    </div>
                  </div>
                )}
              </section>
            </>
          )}
        </div>
      </div>
    </div>
  );
}
